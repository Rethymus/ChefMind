name: "Build and Release Tauri App"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'draft'
        type: choice
        options:
          - draft
          - release
          - prerelease

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            bundle_targets: deb
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle_targets: msi,nsis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri'
          key: ${{ matrix.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libgtk-3-dev \
            build-essential \
            curl \
            wget \
            file

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Windows dependencies..."
          # WebView2 is pre-installed on Windows runners

      - name: Install frontend dependencies
        run: npm ci

      - name: Verify Tauri configuration
        run: |
          echo "=== Verifying Tauri Configuration ==="
          npm run tauri info || echo "Tauri info completed with warnings"
          echo "=== Checking tauri.conf.json syntax ==="
          node -e "console.log('Tauri config is valid:', JSON.parse(require('fs').readFileSync('src-tauri/tauri.conf.json', 'utf8')) ? 'Yes' : 'No')"
          echo "=== Verifying frontendDist configuration ==="
          node -e "const config = JSON.parse(require('fs').readFileSync('src-tauri/tauri.conf.json', 'utf8')); console.log('frontendDist value:', config.build.frontendDist); if (config.build.frontendDist !== '../dist') { console.log('ERROR: frontendDist should be \"../dist\" but is', config.build.frontendDist); process.exit(1); }"

      - name: Build frontend
        run: |
          echo "=== Building Frontend ==="
          npm run build
          # Verify frontend build
          if [ ! -f "dist/index.html" ]; then
            echo "ERROR: Frontend build failed - dist/index.html not found"
            exit 1
          fi
          echo "Frontend build successful"
          echo "=== Frontend build output ==="
          ls -la dist/ | head -10

      - name: Verify frontend assets
        run: |
          echo "=== Verifying Frontend Assets ==="
          if [ -f "dist/index.html" ]; then
            echo "✓ index.html exists ($(stat -c%s dist/index.html) bytes)"
          else
            echo "✗ index.html missing"
            exit 1
          fi
          if [ -d "dist/assets" ]; then
            echo "✓ assets directory exists"
            echo "Asset count: $(ls dist/assets/ | wc -l)"
          else
            echo "✗ assets directory missing"
            exit 1
          fi

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'ChefMind v__VERSION__'
          releaseBody: 'ChefMind 智食谱 - AI驱动的智能菜谱生成平台'
          releaseDraft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          args: --target ${{ matrix.target }}
          tauriScript: npm run tauri

      - name: Verify build artifacts
        run: |
          echo "=== Verifying Build Artifacts ==="
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
              echo "✓ Bundle directory exists"
              find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.msi" -o -name "*.nsis" | head -5
            else
              echo "✗ Bundle directory missing"
              exit 1
            fi
          elif [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
              echo "✓ Bundle directory exists"
              find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.deb" | head -5
            else
              echo "✗ Bundle directory missing"
              exit 1
            fi
          fi

  create-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          generate_release_notes: true
          files: |
            src-tauri/target/*/release/bundle/**/*.msi
            src-tauri/target/*/release/bundle/**/*.nsis
            src-tauri/target/*/release/bundle/**/*.deb
            src-tauri/target/*/release/bundle/**/*.rpm
          body: |
            ## ChefMind 智食谱 v__VERSION__

            AI驱动的智能菜谱生成平台，配备企业级数据存储和性能监控架构。

            ### 安装说明
            - **Windows**: 下载 `.msi` 或 `.nsis` 安装包
            - **Linux**: 下载 `.deb` 安装包

            ### 开发者工具
            程序内置开发者工具，可以通过以下方式打开：
            1. 使用快捷键 `F12` 或 `Ctrl+Shift+I`
            2. 在浏览器控制台中执行：`window.__TAURI__.window.getCurrent().openDevtools()`

            ### 系统要求
            - Windows 10+ 或 Linux (Ubuntu 20.04+)
            - 至少 100MB 可用空间
            - 网络连接（AI功能需要）