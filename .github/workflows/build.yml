name: "publish"

on:
  workflow_dispatch:
  push:
    tags:
      - 'app-v*'

# Tauri v2 GitHub Actions workflow for building desktop applications
# This workflow creates releases and builds for multiple platforms

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node 20 for better compatibility

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            // Check if release already exists
            const tag = `app-v${process.env.PACKAGE_VERSION}`;
            try {
              const { data: existingRelease } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });

              // If release exists and is not a draft, delete existing assets first
              if (existingRelease && !existingRelease.draft) {
                console.log(`Release ${tag} already exists, cleaning up existing assets...`);

                // Delete existing assets
                const { data: assets } = await github.rest.repos.listReleaseAssets({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id
                });

                for (const asset of assets) {
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                  console.log(`Deleted existing asset: ${asset.name}`);
                }

                return existingRelease.id;
              }
            } catch (error) {
              // Release doesn't exist, create new one
              if (error.status === 404) {
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `ChefMind Desktop App v${process.env.PACKAGE_VERSION}`,
                  body: '## ChefMind Desktop App v${process.env.PACKAGE_VERSION}\n\n### Installation\n\n**Windows:**\n- Download and run the `.msi` installer\n- The app will be installed in Program Files\n- Developer tools can be accessed with Ctrl+Shift+I or F12\n\n**Linux:**\n- Download the `.deb` package for Debian/Ubuntu\n- Download the `.rpm` package for Fedora/CentOS\n- Developer tools can be accessed with Ctrl+Shift+I or F12\n\n### Features\n- AI-powered recipe generation\n- Smart kitchen assistant\n- Enterprise-grade data storage\n- Built-in developer tools for debugging\n\n### Troubleshooting\nIf you encounter any issues:\n1. Press F12 or Ctrl+Shift+I to open developer tools\n2. Check the console for error messages\n3. Verify that all frontend resources loaded correctly',
                  draft: true,
                  prerelease: false
                });
                return data.id;
              }
              throw error;
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: ""
            target: "x86_64-unknown-linux-gnu"
          - platform: "windows-latest"
            args: ""
            target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set environment variables for Tauri
        shell: bash
        run: |
          echo "Current working directory: $(pwd)"
          echo "Frontend dist path: $(pwd)/dist"

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri'
          key: v1-rust-${{ matrix.platform }}-${{ matrix.target }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev librsvg2-dev patchelf libssl-dev libgtk-3-dev build-essential curl wget file
          # Use libayatana-appindicator3-dev instead of libappindicator3-dev to avoid conflicts
          sudo apt-get install -y libayatana-appindicator3-dev
          # Remove conflicting packages if they exist
          sudo apt-get remove -y libappindicator3-dev || true
          sudo apt-get autoremove -y
          sudo apt-get install -f

      - name: install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          # WebView2 is typically pre-installed on Windows runners
          echo "Checking WebView2 installation..."
          Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}" -Name "pv" -ErrorAction SilentlyContinue

      - name: install frontend dependencies
        run: npm install

      - name: verify tauri configuration
        run: |
          echo "=== Verifying Tauri Configuration ==="
          npm run tauri info || echo "Tauri info completed with warnings"
          echo "=== Checking tauri.conf.json syntax ==="
          node -e "console.log('Tauri config is valid:', JSON.parse(require('fs').readFileSync('src-tauri/tauri.conf.json', 'utf8')) ? 'Yes' : 'No')"
          echo "=== Checking Rust compilation ==="
          cargo check --manifest-path src-tauri/Cargo.toml || echo "Rust check completed with warnings"

      - name: build frontend
        run: npm run build

      - name: Copy frontend build to src-tauri directory
        shell: bash
        run: |
          echo "=== Copying frontend build to Tauri directory ==="
          echo "Current directory: $(pwd)"
          echo "Copying dist/ to src-tauri/dist/"
          cp -r dist/ src-tauri/
          echo "Verifying copy:"
          ls -la src-tauri/dist/
          echo "Checking src-tauri/dist/index.html:"
          if [ -f "src-tauri/dist/index.html" ]; then
            echo "Frontend assets successfully copied to src-tauri/dist/"
            head -5 src-tauri/dist/index.html
          else
            echo "ERROR: Failed to copy frontend assets"
            exit 1
          fi

      - name: build tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          tauriScript: npm run tauri
          tagName: app-v__VERSION__ # Let tauri-action handle the version
          includeDebug: false # Only build release mode

      - name: Verify build output
        shell: bash
        run: |
          echo "=== Build Output Verification ==="
          if [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
            echo "Checking Linux build output..."
            ls -la src-tauri/target/ || echo "Target directory not found"
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
              find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.deb" -o -name "*.rpm" | head -10
            else
              echo "Bundle directory not found, checking release directory..."
              ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"
            fi
          else
            echo "Checking Windows build output..."
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
              find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.msi" -o -name "*.exe" | head -10
            else
              echo "Bundle directory not found, checking release directory..."
              ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "Release directory not found"
              # Check if we have the standalone executable
              if [ -f "src-tauri/target/${{ matrix.target }}/release/chefmind.exe" ]; then
                echo "Found standalone executable: chefmind.exe"
              fi
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.target }}-artifacts-${{ github.run_number }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
            src-tauri/target/${{ matrix.target }}/release/*.exe
            src-tauri/target/${{ matrix.target }}/release/*.msi
            src-tauri/target/${{ matrix.target }}/release/*.deb
            src-tauri/target/${{ matrix.target }}/release/*.rpm
            src-tauri/target/${{ matrix.target }}/release/*.app
            src-tauri/target/${{ matrix.target }}/release/*.dmg
          if-no-files-found: warn
          overwrite: true # Overwrite if artifacts with same name exist

      - name: Clean up frontend copy
        shell: bash
        run: |
          echo "=== Cleaning up frontend copy ==="
          if [ -d "src-tauri/dist" ]; then
            rm -rf src-tauri/dist
            echo "Removed src-tauri/dist"
          fi

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    if: success() # Only publish if all builds succeeded

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            // Only publish if release is still in draft
            try {
              const { data: release } = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id
              });

              if (release.draft) {
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.release_id,
                  draft: false,
                  prerelease: false
                });
                console.log('Release published successfully');
              } else {
                console.log('Release was already published');
              }
            } catch (error) {
              console.log('Release might already be published or error occurred:', error.message);
            }